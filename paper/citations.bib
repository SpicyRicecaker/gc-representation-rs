@online{build_your_own_openjdk_gc,
  title        = {Build Your Own GC with OpenJDK in 20 minutes},
  date         = {2019},
  month        = Feb,
  day          = {11},
  organization = {Youtube},
  author       = {Roman Kennke},
  url          = {https://www.youtube.com/watch?v=ko39IWFam5g}
}

@online{youtube_introductory_video,
  title        = {Garbage Collection Algorithms: Mark Sweep, Generation Hypothesis and JIT Code Injection.},
  date         = {2020},
  month        = Dec,
  day          = {15},
  organization = {Youtube},
  author       = {Gaurav Sen},
  url          = {https://www.youtube.com/watch?v=ZhbIReLe-r8}
}

@online{gc_faq,
  title        = {GC FAQ},
  organization = {The Invincible Electric Calculator Company},
  url          = {https://www.iecc.com/gclist/GC-faq.html}
}

@online{generational_scavenging_austin,
  title        = {Generation Scavenging: A Non-Disruptive High-Performance Storage Reclamation Algorithm},
  organization = {The University of Texas at Austin},
  author       = {Donald Nguyen},
  date         = {2009},
  month        = Feb,
  day          = {9},
  url          = {https://www.cs.utexas.edu/users/mckinley/395Tmm/talks/Feb-9-Ungar.pdf}
}

@online{garbage_collection_overview_uw,
  title        = {Garbage Collection Algorithms},
  organization = {The University of Washington},
  author       = {Rick Byers},
  date         = {2007},
  url          = {https://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf}
}

@online{garbage_collection_overview_mit,
  title        = {Garbage Collection},
  organization = {The University of Massachusetts Amherst},
  author       = {Emergy Berger and Bruno Silva},
  date         = {2009},
  url          = {https://people.cs.umass.edu/~emery/classes/cmpsci377/current/notes/lecture_21_gc.pdf}
}

@online{programming_languages_electricity,
  title        = {Which Programming Languages Use the Least Electricity?},
  organization = {The New Stack},
  author       = {David Cassel},
  date         = {2018},
  month        = May,
  day          = {18},
  url          = {https://thenewstack.io/which-programming-languages-use-the-least-electricity}
}

@book{gc_handbook,
  title     = {The Garbage Collection Handbook: The Art of Automatic Memory Management},
  author    = {Jones, R. and Hosking, A. and Moss, E.},
  isbn      = {9781315388007},
  series    = {Chapman \& Hall/CRC Applied Algorithms and Data Structures series},
  url       = {https://books.google.com/books?id=kM6NDwAAQBAJ},
  year      = {2016},
  publisher = {CRC Press}
}

@inbook{gc_handbook_intro,
  title     = {The Garbage Collection Handbook: The Art of Automatic Memory Management},
  author    = {Jones, R. and Hosking, A. and Moss, E.},
  isbn      = {9781315388007},
  series    = {Chapman \& Hall/CRC Applied Algorithms and Data Structures series},
  url       = {https://books.google.com/books?id=kM6NDwAAQBAJ},
  year      = {2016},
  pages     = {},
  publisher = {CRC Press}
}

@inbook{nystrom,
  title     = {Crafting Interpreters},
  author    = {Nystrom, R.},
  isbn      = {9780990582939},
  url       = {https://books.google.com/books?id=ySOBzgEACAAJ},
  year      = {2021},
  publisher = {Genever Benning},
  pages     = {500-525}
}

@book{the_rust_programming_language,
  author  = {Steve Klabnik and Carol Nichols},
  title   = {The Rust Programming Language},
  url     = {https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html?highlight=stack#the-stack-and-the-heap},
  year    = {2022}
}

@online{a_unified_theory_of_garbage_collection,
  title     = {A unified theory of garbage collection},
  url       = {https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/unified-theory-gc/},
  publisher = {Cornell University},
  author    = {Mark Anastos and Qian Huang},
  day       = {8},
  year      = {2019},
  month     = Nov,
  note      = {Presents mathematical formulas for tracing and reference garbage collectors, as well as explains what tracing and reference garbage collectors are.}
} 

@online{redhat_openjdk,
  title     = {Do It Yourself (OpenJDK) Garbage Collector},
  url       = {https://shipilev.net/jvm/diy-gc/},
  publisher = {Redhat},
  author    = {Mark Anastos and Qian Huang},
  day       = {25},
  year      = {2020},
  month     = Nov,
  note      = {References the fossdem vide of how to create your own openjdk thing}
} 

@online{code_project,
  title     = {Allocating Memory on Linux and Windows},
  url       = {https://www.codeproject.com/Articles/1255908/Allocating-Memory-on-Linux-and-Windows},
  publisher = {CodeProject},
  author    = {RCL{\_}SPD},
  day       = {10},
  year      = {2018},
  month     = Aug,
  note      = {Tells about how virtual memory and physical memory are managed in operating systems. Talks about pages, page tables, and physical TLB buffers.}
} 

@online{brookheislerAnalysisProcessCriterion,
  title   = {Analysis {{Process}} - {{Criterion}}.Rs {{Documentation}}},
  author  = {{Brook Heisler}},
  url     = {https://bheisler.github.io/criterion.rs/book/analysis.html},
  urldate = {2022-01-31},
  file    = {/Users/oliver/git/zotero-system/storage/CFUMI56C/analysis.html}
}

@online{simondevCanJavaScriptGo2021,
  title      = {Can {{JavaScript Go Faster}}? {{Threading}} in {{JavaScript}} ({{Data Structures}} \& {{Optimization}})},
  shorttitle = {Can {{JavaScript Go Faster}}?},
  editor     = {{SimonDev}},
  date       = {2021-08-16},
  url        = {https://www.youtube.com/watch?v=pQPqhZRUz3U},
  urldate    = {2022-01-23},
  abstract   = {Can you make JavaScript run even faster? Or is it limited as a single thread language? Patreon: https://www.patreon.com/simondevyt Follow me on: Twitter: https://twitter.com/iced\_coffee\_dev Instagram: https://www.instagram.com/beer\_and\_code/ Github: https://github.com/simondevyoutube/ In this video we talk a bit about JavaScript's mechanisms for concurrency and spreading the work out over multiple threads/cores. We'll cover the web worker API in a bit of detail, dedicated workers, and then we'll move on to creating a small testing setup. It's kind of interesting to explore the threading opportunities that JavaScripts offers through the Web Worker API, the various pitfalls and performance footguns that lurk there, and what you can do to mitigate these issues. We'll also explore using transferable objects with ArrayBuffer, and touch quickly on what SharedArrayBuffer unlocks in terms of concurrency and multiple threads reading/writing. Links: https://developer.mozilla.org/en-US/d... https://surma.dev/ https://surma.dev/things/is-postmessa... https://v8.dev/docs/embed https://developer.mozilla.org/en-US/d... https://developer.mozilla.org/en-US/d... https://developer.mozilla.org/en-US/d... https://developers.google.com/web/upd... https://en.wikipedia.org/wiki/JavaScript And yes, Node also has threads: https://nodejs.org/api/worker\_threads...},
  editortype = {director},
  keywords   = {thread}
}